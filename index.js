// Inicializa as depend√™ncias

require('dotenv').config(); // Biblioteca "dotenv" carrega vari√°veis ‚Äã‚Äãde ambiente de um arquivo .env
const Twitter = require('twitter-lite'); // Biblioteca cliente/servidor para a API do Twitter.
const checkInternetConnected = require('check-internet-connected'); // Biblioteca que verifica se estamos conectados √† Internet ou n√£o
const ora = require('ora'); // Cria anima√ß√µes no console (S√≥ funciona no terminal)
const figlet = require('figlet'); // Cria textos com fontes bem legais tipo os vistos aqui: http://patorjk.com/software/taag/
const colors = require('colors');

// Esquema de cores para o console
colors.setTheme({
  info: 'Blue',
  help: 'cyan',
  warn: 'yellow',
  success: 'Green',
  error: 'red'
});

// vari√°veis
var dataAtual = new Date(); // Data atual
var internetStatus = true; // Status da internet, por padr√£o vem como funcionando (verdadeiro)
var dataDeQueda; // Data de queda
var oraConsoleLogOnline = false; //
var oraConsoleLogOffline = false; //
var aguardandoRede = ora('Aguardando rede');

// Nome do script que ser√° impresso na tela ao inicializar
console.log(figlet.textSync('CiacOff!', { font: "3D-ASCII" }));

// Construtor do client para o twitter
console.log(`[‚ùï] ${DateTimeFormat(dataAtual)} - Inicializando construtor client twitter`);
const client = new Twitter({
  subdomain: "api", // "api" √© o padr√£o (altera√ß√£o para outros subdom√≠nios)
  version: "1.1", // Vers√£o da API (mudan√ßa para outros subdom√≠nios)
  consumer_key: process.env.CONSUMER_KEY, // Chaves da API
  consumer_secret: process.env.CONSUMER_SECRET,
  access_token_key: process.env.ACCESS_TOKEN,
  access_token_secret: process.env.TOKEN_SECRET,
});

// Construtor da configura√ß√£o de testes de rede
console.log(`[‚ùï] ${DateTimeFormat(dataAtual)} - Inicializando construtor testes internet`);
const config = {
  timeout: 5000, // tempo para timeout
  retries: 5,// n√∫mero de tentativas
  domain: 'https://google.com',// dom√≠nio para checar DNS resolve
}

// Fun√ß√£o que realiza os tweets
console.log(`[‚ùï] ${DateTimeFormat(dataAtual)} - Inicializando fun√ß√µes`);
async function tweet(message) {
  const tweet = await client.post("statuses/update", {
    status: message,
  });
}

// Fun√ß√£o que formata a data
function DateTimeFormat(date) {

  if (date === null) {
    date = Date;
  }

  var hour = date.getHours();
  hour = (hour < 10 ? "0" : "") + hour;
  var min = date.getMinutes();
  min = (min < 10 ? "0" : "") + min;
  var sec = date.getSeconds();
  sec = (sec < 10 ? "0" : "") + sec;

  return hour + ":" + min + ":" + sec;

}

// Finaliza inicializa√ß√£o, e cria um separadorzinho
console.log(`[‚úÖ] ${DateTimeFormat(dataAtual)} - Inicializado testes`);
console.log(figlet.textSync('----------', { horizontalLayout: 'default' }));

// Loop para para realizar as fun√ß√µes
setInterval(() => {
  // cria um log no console animado, com um spinner que diz "Testando conex√£o"
  var statusTest = ora('Testando conex√£o').start();

  // Testamos o estado da conex√£o
  checkInternetConnected(config)
    .then((result) => {
      // Atualiza o hor√°rio
      dataAtual = new Date;

      // Verifica se o aguardandoRede est√° girando.
      // Se estiver, quer dizer que a internet havia ca√≠do, e estava esperando por reconex√£o
      if (aguardandoRede.isSpinning) {
        // Ao reconectar, para a anima√ß√£o
        aguardandoRede.stop();
      } // Do contr√°rio, s√≥ ignora para evitar erros

      // Previne que seja gerado v√°rios "Onlines" no console
      // Verificamos se o log do online j√° est√° no console, atrav√©s da vari√°vel `oraConsoleLogOnline`
      // Caso ainda n√£o tenha sido feito (false), enviamos o evento para o console
      if (oraConsoleLogOnline == false) {
        // a linha a baixo √© respons√°vel pos fazer o log do evento online acontecer
        statusTest.succeed(`${DateTimeFormat(dataAtual)} - Online`);
      } else {
        // A inst√¢ncia stop, para o "statusTest" para e limpa a linha do console
        // Assim s√≥ temos uma pequena anima√ß√£o gerada ao carregar o "statusTest", com a sua mensagem pr√© definida de "Testando conex√£o"
        statusTest.stop();
      }
      // Aqui dizemos que o log de online j√° foi escrito...
      // Agora, para que o "statusTest" de ONLINE possa ser escrito novamente, a internet ter√° de cair, para ele receber o status false, e ent√£o entrar no if aqui de cima
      // Nota: A anima√ß√£o de teste ainda ocorre enquanto o checkInternetConnected estiver rodando
      oraConsoleLogOnline = true;

      // verificamos o status pr√©vio da internet salvo na vari√°vel "internetStatus" com um if statement
      // se for falso, quer dizer que estava-mos sem internet at√© a execu√ß√£o desse c√≥digo
      // ou seja, devemos avisar no twitter de que est√°vamos sem internet e que a conex√£o voltou, junto ao hor√°rio de queda
      if (internetStatus == false) {

        // para isso, usamos um try, junto com a fun√ß√£o tweet, declarada l√° em cima
        try {
          // Como a conex√£o retornou, redefinimos as duas vari√°veis das anima√ß√µes
          // oraConsoleLogOnline, do `statusTest` com a mensagem de ‚úî online
          // oraConsoleLogOffline, do `statusTest` com a mensagem de ‚úñ offline
          oraConsoleLogOnline = false;
          oraConsoleLogOffline = false;
          // log do console
          console.log(`üåé ${DateTimeFormat(dataAtual)} - Retornou ${result}`.success); // conex√£o de internet est√° online
          //faz o tweet
          tweet(`Atualiza√ß√£o:\nüòî CiacOFF: ${DateTimeFormat(dataDeQueda)}\nü•∞ CiacON: ${DateTimeFormat(dataAtual)}\n\nOs dados aqui apresentados n√£o representam o status da rede como uma totalidade. Caso esteja enfrentando instabilidades, entre em contato com a provedora`)
            .then(internetStatus = true) // Ao acabar de fazer o tweet, alteramos o status da vari√°vel "internetStatus" para verdadeiro,           
          // e ent√£o joga pro log o evento
          console.log(`üê¶ ${DateTimeFormat(dataAtual)} - Post`.help);
        } catch (error) {
          // Caso haja erro, o escrevemos no console
          console.log(colors.red(error.message))
        }
      } // Fim do if  
    })
    .catch((ex) => {
      // Atualiza o hor√°rio
      dataAtual = new Date;

      if (oraConsoleLogOffline == false) {
        statusTest.fail(`${DateTimeFormat(dataAtual)} - Offline`);
      } else {
        statusTest.stop();
      }
      oraConsoleLogOffline = true;

      // se a execu√ß√£o cair aqui, quer dizer que obtivemos um erro ao tentar resolver o DNS do dom√≠nio declarado l√° em cima.
      // Ou seja, estamos sem internet, pois n√£o atingimos o servidor DNS

      // Para criar o log e o evento, sem realizar uma sobrescri√ß√£o doa valores de data, e hor√°rio de queda
      // precisamos verificar se a conex√£o estava ativa
      if (internetStatus == true) {
        // Sendo assim jogamos o status da rede para o log, avisando de que ela acabou de ficar offline
        console.log(`‚Äº ${DateTimeFormat(dataAtual)} - ${ex}`.error);
        // Inicia a anima√ß√£o de aguardando rede
        aguardandoRede.start();
        // Atribu√≠mos ao "downDate" a data e hora atual, passando o "dataAtual",
        // que foi previamente atualizado com o hor√°rio da √∫ltima consulta
        dataDeQueda = dataAtual;
        // Tamb√©m atribu√≠mos o status atual da rede como falso, 
        // para n√£o entrarmos aqui novamente e termos ums sobrescri√ß√£o de valores nas vari√°veis
        internetStatus = false;
      }
    });
}, 5000) // intervalo de 5000ms


// Lixinho recicl√°vel:

//try {
//  tweet(`Ol√° mundo! üåé`)
//} catch (error) {
//  console.log(error);
//}

//client
//  .get("account/verify_credentials")
//  .then(results => {
//    console.log("results", results);
//  })
//  .catch(console.error);

// Adicionar novamente na fun√ß√£o `DateTimeFormat` caso queira retorno de ano, dia e m√™s
/*
var year = date.getFullYear();
var month = date.getMonth() + 1;
month = (month < 10 ? "0" : "") + month;
var day  = date.getDate();
day = (day < 10 ? "0" : "") + day;
return day + "/" + month + "/" + year + " - " + hour + ":" + min + ":" + sec + " ";
*/